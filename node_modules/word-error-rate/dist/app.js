"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const object_hash_1 = __importDefault(require("object-hash"));
exports.createHashArray = (s) => {
    return s.toLowerCase()
        .split(" ")
        .map(word => object_hash_1.default(word));
};
exports.calculateEditDistance = (incoming, expected) => {
    if (incoming.length === 0 || expected.length === 0)
        return Math.max(incoming.split(" ").length, expected.split(" ").length);
    let [incomingHashes, expectedHashes] = [exports.createHashArray(incoming), exports.createHashArray(expected)];
    let [length, height] = [incomingHashes.length, expectedHashes.length];
    let dp = initializeArray(height, length);
    for (let column = 0; column < height; column++) {
        for (let row = 0; row < length; row++) {
            if (column === 0 && row === 0) {
                dp[column][row] = (incomingHashes[0] === expectedHashes[0]) ? 0 : 1;
            }
            else if (row === 0) {
                dp[column][row] = dp[column - 1][0] + ((incomingHashes[row] === expectedHashes[column]) ? 0 : 1);
            }
            else if (column === 0) {
                dp[column][row] = dp[0][row - 1] + ((incomingHashes[row] === expectedHashes[column]) ? 0 : 1);
            }
            else {
                dp[column][row] =
                    Math.min((dp[column - 1][row] + 1), (dp[column][row - 1] + 1), (dp[column - 1][row - 1] + (incomingHashes[row] === expectedHashes[column] ? 0 : 1)));
            }
        }
    }
    return dp[height - 1][length - 1];
};
const initializeArray = (length, height) => {
    let dp = [];
    for (let i = 0; i < length; i++) {
        dp.push([]);
        for (let j = 0; j < height; j++) {
            dp[i].push(-1);
        }
    }
    return dp;
};
exports.wordErrorRate = (incoming, expected) => {
    const editDistance = exports.calculateEditDistance(incoming, expected);
    const score = editDistance / Math.max(incoming.split(" ").length, expected.split(" ").length);
    return score;
};
//# sourceMappingURL=app.js.map